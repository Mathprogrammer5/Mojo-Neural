# defines activation functions, and a few constants

alias E: Float32 = 2.71828174591064453125

# defines relu activation function
fn relu(borrowed x: Float32) -> Float32:
    let val = x if x > 0 else 0
    return val

# defines leakyrelu activation function
# fn leakyrelu(borrowed a: Float32, borrowed x: Float32) -> Float32:
#     let val: Float32 = a*x
#     return val

# defines elu activation function
fn elu(borrowed a: Float32, borrowed x: Float32) -> Float32:
    let val = x if x > 0 else a*(E**x-1)
    return val

# defines sigmoid activation function
fn sigmoid(borrowed x: Float32) -> Float32:
    return 1/(1+E**(-x))

# defines tanh activation function
fn tanh(borrowed z: Float32) -> Float32:
    return (E**z-E**(-z))/(E**z+E**(-z))
