# defines layer trait and structs conforming to it
import activations as act
from neuron import NormCell, Neuron
from tensor import Tensor, TensorShape, TensorSpec

# Layer trait
trait Layer(CollectionElement):

  """
  A trait implementing methods for
  Neural Network layers.
  """
  
  fn __getitem__(inout self, owned key: Int) -> NormCell:
    ...

  fn __copyinit__(inout self, borrowed other: Self):
    ...

  fn __moveinit__(inout self, owned other: Self):
    ...

  fn out(inout self: Self) -> DynamicVector[Float64]:
    ...

  fn eval(inout self, a: Float64 = 0):
    ...

struct Input(Layer):
  
  fn __init__(inout self):
    pass
  fn __getitem__(inout self, owned key: Int) -> NormCell:
    pass
  fn __copyinit__(inout self, borrowed other: Self):
    pass
  fn __moveinit__(inout self, owned other: Self):
    pass
  fn out(inout self: Self) -> DynamicVector[Float64]:
    pass
  fn eval(inout self, a: Float64 = 0):
    pass

struct Output(Layer):
  
  fn __init__(inout self):
    pass
  fn __getitem__(inout self, owned key: Int) -> NormCell:
    pass
  fn __copyinit__(inout self, borrowed other: Self):
    pass
  fn __moveinit__(inout self, owned other: Self):
    pass
  fn out(inout self: Self) -> DynamicVector[Float64]:
    pass
  fn eval(inout self, a: Float64 = 0):
    pass

struct Dense(Layer):

  var in_layer: Layer
  var neurons: DynamicVector[NormCell]
  var activation: Int16

  fn __init__(inout self, neurons: Int, prec_layer: Layer, act: Int16):
    self.in_layer = prec_layer
    self.neurons = DynamicVector[NormCell]()
    self.activation = act
    for i in range(neurons):
      self.neurons.append(NormCell(self.in_layer.out(), self.activation))
    
  fn __getitem__(inout self, owned key: Int) -> NormCell:
    let k = key
    return self.neurons[key]

  fn __copyinit__(inout self, borrowed other: Self):
    self.in_layer = other.in_layer
    self.neurons = other.neurons
    self.activation = other.activation

  fn __moveinit__(inout self, owned other: Self):
    self.in_layer = other.in_layer
    self.neurons = other.neurons
    self.activation = other.activation

  fn out(inout self: Self) -> DynamicVector[Float64]:
    var vec = DynamicVector[Float64]()
    for i in range(len(self.neurons)):
      let n = self.neurons[i]
      vec.append(n.value)
    return vec

  fn eval(inout self, a: Float64 = 0):
    for n in range(len(self.neurons)):
      self.neurons[n].eval(a)
