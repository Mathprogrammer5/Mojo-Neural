# defines neurons with an input and output for the digital creatures
from Neural.neuron import Neuron#, Cell
from Neural.activations import sigmoid
from Neural.vec import wsum
from random import random_float64 as rf64

trait IONeuron(Neuron):

  '''
  Simple trait for cells with an input and an output.
  '''
  
  fn add_input(inout self, n: Neuron):
    ...

  fn add_output(inout self, n: Neuron):
    ...

  async fn eval_outs(inout self):
    ...

struct InternalNeuron(IONeuron):

  var value: Float64
  var inputs: DynamicVector[Neuron]
  var outputs: DynamicVector[Neuron]
  var weights: DynamicVector[Float64]
  var bias: Float64

  fn __init__(inout self):
    self.value = 0
    self.inputs = DynamicVector[Neuron]()
    self.outputs = DynamicVector[Neuron]()
    self.weights = DynamicVector[Float64]()
    self.bias = rf64(-4, 4)

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    self.inputs = other.inputs
    self.outputs = other.outputs
    self.weights = other.weights
    self.bias = other.bias

  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value
    self.inputs = other.inputs
    self.outputs = other.outputs
    self.weights = other.weights
    self.bias = other.bias

  fn add_input(inout self, n: Neuron):
    self.weights.append(rf64())
    self.inputs.append(n)
  
  fn add_output(inout self, n: Neuron):
    self.weights.append(rf64())
    self.outputs.append(n)

  fn eval(inout self):
    var vec = DynamicVector[Float64]()
    for n in range(len(self.inputs)):
      vec.append(self.inputs[n].value)
    sigmoid(wsum(vec, self.weights))
  
  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return
